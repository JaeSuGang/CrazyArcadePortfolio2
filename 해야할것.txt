우선순위


0. RenderManager와 RenderComponent 리팩토링하기.
RenderComponent가 RenderManager의 multimap<int, URenderComponent*>에 insert해주어야함.

RenderManager는 이 map을 중위순환하여 렌더링을 시작함.
int 가 낮을수록 먼저 렌더링되고 뒤쪽에 있음.
렌더링이 완료되면 이 map을 clear해줌


1. 타일맵 에디터, 타일맵 직렬화, 타일맵 역직렬화
2. 렌더 순서 알고리즘 만들기
렌더 순서 -> 레드블랙트리 map<float, AActor*> 로 만들기

모든 Actor가 Tick에서 자신의 Position Y밸류를 키값으로
레드블랙 트리 map<float, AActor*>에 insert됨.
-----------------------------------------------------------------
매 Tick마다 렌더 컴포넌트를 위치 Y값으로 정렬되는 map에 insert한뒤,
중위 순환으로 렌더하고,
map을 clear하기

vs

Actor가 움직일때마다 map에서 찾은후 재배열 (float에 대한 ==연산자가 제대로 작동하는가)

vs
URenderComponent가 매 TickComponent마다 자신의 Y밸류를 몇번째 높이 타일인지로 치환후
map <int, URenderComponent*>에 Insert;
floorTile은 Key = 0
UI의 Key = 999;

---------------------------------------------------------------------
3. 물풍선 터질때 물풍선 범위에 있는 actor들을 효과적으로 가져오는법?




4. 캐릭터 애니메이션에 그림자 넣기






4. URenderComponent가 가진 UImage* StaticImage의 UImage주소를 변경시켜주는게
Animation의 역할 ★되도록이면 면접 대비를 위해 FSM으로 구현

5. FLevelData라는 직렬화가능 구조체를 만들고,
이 구조체를 받아서 게임 스테이지에 맞게 SpawnActor해주는 BeginPlay() 오버로드된 함수 생성 

6. 멈춰도 바로 멈추는 것이 아니라 여러 상태와 조건에 따라 
어떻게 animation이 바뀔지를 결정할 수 있는 FSM모델 구현

7. 애니메이션 PlayAnimation if문 너무 많은거 리팩토링하기

8. UI렌더링 제외 시키는 최적화 방법 마련하기