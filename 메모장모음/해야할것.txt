

0. 아이템 만들기, 이미지 잘라서 넣기, 효과 넣기

0. 아이템 이미지를 좀더 위로 올리게하기
아이템용 작은 그림자 추가하기
아이템 위아래로 움직이는 애니메이션 추가하기

1. 로그인 화면 넣기

0. AI봇 설계

Idle 상태 : 특별한 목적지 없이 랜덤하게 움직임
FindObjective : 수행해야할 목표를 결정함
Order 상태 : OrderQueue에 있는 Order들을 차례로 수행함
OrderType::Move
OrderType::PutBomb

1. 휴리스틱 A* 알고리즘 구현 설계

현재위치, 목표위치 저장

현재위치를 Open 리스트에 넣음

--반복시작--
Open 리스트에서 f가 제일 낮은 최소 힙을5 꺼냄
위치 구조체의 상하좌우에 CollisionAABB생성, Wall과의 충돌감지, 충돌시 위치구조체 생성 X.
Open 리스트에 이미 존재시 생성 X
각 위치구조체에 휴리스틱추정값을 넣음 (맨해튼 거리)
Open리스트에 넣기 (힙 구조)








1. 상자 밀기 구현하기
2. 부시속에 숨게하기



큐 = bfs 서치
스택 = dfs 서치
길찾기 알고리즘으로 활용
A* 길찾기 = BFS + 휴리스틱


5. AI는 FSM으로 구현하기.
5. AStar, JPS 길찾기 알고리즘 적용해보기
강의 영상, 소스 코드도 포함
https://www.youtube.com/watch?v=rfOgaPXCADQ&list=PLJyxKbGKjtQtoUmxC9oyeOqmExB3u2ZxB&index=1





4. URenderComponent가 가진 UImage* StaticImage의 UImage주소를 변경시켜주는게
Animation의 역할 ★되도록이면 면접 대비를 위해 FSM으로 구현

5. FLevelData라는 직렬화가능 구조체를 만들고,
이 구조체를 받아서 게임 스테이지에 맞게 SpawnActor해주는 BeginPlay() 오버로드된 함수 생성 

6. 멈춰도 바로 멈추는 것이 아니라 여러 상태와 조건에 따라 
어떻게 animation이 바뀔지를 결정할 수 있는 FSM모델 구현

7. 애니메이션 PlayAnimation if문 너무 많은거 리팩토링하기

8. UI렌더링 제외 시키는 최적화 방법 마련하기

9. 코드 내에 리터럴 값을 가지지 않도록 전부 멤버 변수화 시키기